# -*- coding: utf-8 -*-
"""AlphaHealup.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16tXAfuLHLY28Q4HF_gR3X9eNvh1wQQQN
"""

from sklearn.metrics.pairwise import cosine_similarity #we imported libraries here
import numpy as np

# here basically we defined score to severity level mapping
score_to_severity = {
    (0, 4): "None",
    (5, 9): "Mild",
    (10, 14): "Moderate",
    (15, 19): "Moderately Severe",
    (20, 27): "Severe"
}

# now we defined video recommendations for each severity level with YouTube video links
video_recommendations = {
    "None": [
        {"title": "Video for No Depression", "link": "https://youtu.be/RWWFIgAHg4w?feature=shared"},
    ],
    "Mild": [
        {"title": "Video for Mild Depression", "link": "https://www.youtube.com/watch?v=hvSDbX790rI"},
    ],
    "Moderate": [
        {"title": "Video for Moderate Depression", "link": "https://www.youtube.com/watch?v=MJlzBHbxDSk"},
    ],
    "Moderately Severe": [
        {"title": "Video for Moderately Severe Depression", "link": "https://www.youtube.com/watch?v=xhaV1UAuIqY"},
    ],
    "Severe": [
        {"title": "Video for Severe Depression", "link": "https://www.youtube.com/watch?v=-U5dEdWouDY"},
    ]
}

# Take user input for PHQ-9 score
user_score = int(input("Enter your PHQ-9 score: "))

# Calculate cosine similarity between user's score and video content
user_score_vector = np.array([user_score]).reshape(1, -1)
video_scores = np.array([score_range[0] for score_range in score_to_severity.keys()]).reshape(-1, 1)
similarities = cosine_similarity(user_score_vector, video_scores)

# Find the severity level based on user's score
severity_level = None
for i, score_range in enumerate(score_to_severity.keys()):
    if score_range[0] <= user_score <= score_range[1]:
        severity_level = list(score_to_severity.values())[i]
        break

# Recommend videos based on severity level
if severity_level:
    recommended_videos = video_recommendations.get(severity_level, [])
    if recommended_videos:
        print(f"Recommended Videos for {severity_level} Depression:")
        for video in recommended_videos:
            print(f"{video['title']}: {video['link']}")
    else:
        print("No video recommendations available for your severity level.")
else:
    print("Invalid PHQ-9 score input.")